package SW
public
	with Drivers;
	with Waterways_UxAS;
    with CASE_Model_Transformations;
    
    with CASEAgree;
    with CASEConsts;
    
	process SW
        features
	       uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
           uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
           radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
           radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		flows
		   recv_map : flow path radio_recv -> uart_send;
		   status: flow path uart_recv -> radio_send;
        annex agree {**
            guarantee Req001_SW "The radio_send outputs only well formed CASE_RF_Msg.Impl types" : 
                CASEAgree::WellformedCASE_RF_Msg(radio_send, CASEAgree::AVC.ID, CASEConsts::GS_ID);
            guarantee Req002_SW "The uart_send outputs only well formed CASE_RF_Msg.Impl types" : 
                CASEAgree::WellformedCASE_UART_Msg(uart_send);
        **};
            
	end SW;
			
	process implementation SW.Impl
	   subcomponents
	       GIMBAL: thread Drivers::GimbalDriver.Impl;
           FC_UART: thread Drivers::UARTDriver.Impl;
           RADIO: thread Drivers::RadioDriver.Impl;
           UXAS: thread group Waterways_UxAS::Waterways.i;
		connections
		   ------------------
	       -- Primary Inputs
	       ------------------
		   c01: port uart_recv -> FC_UART.recv_data;
		   c02: port radio_recv -> RADIO.recv_data;
		    	           
		   ----------- 	           
           -- FC_UART
           -----------
           c03: port FC_UART.send_data -> uart_send;
           c04: port FC_UART.AirVehicleState -> GIMBAL.AirVehicleState;
           c05: port FC_UART.AirVehicleState -> UXAS.AirVehicleState;
           c06: port FC_UART.AirVehicleState -> RADIO.AirVehicleState;
           
           ---------
           -- RADIO
           ---------
           c07: port RADIO.send_data -> radio_send;
           c08: port RADIO.AutomationRequest -> UXAS.AutomationRequest; 	
            
           --------
           -- UXAS
           --------
           c09: port UXAS.MissionCommand -> FC_UART.MissionCommand;
           c11: port UXAS.VehicleActionCommand -> GIMBAL.VehicleActionCommand;
           c12: port UXAS.AutomationResponse -> RADIO.AutomationResponse;
               
	end SW.Impl;
	
end SW;