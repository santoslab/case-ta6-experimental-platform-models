package Drivers
public

	with CASE_Properties;
	with CASE_Model_Transformations;
	with CMASI;
    with CASECMASI;
    with CASEAgree;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			
			-- UxAS
            AutomationResponse: in event data port CMASI::AutomationResponse.i;
            AirVehicleState: in event data port CMASI::AirVehicleState.i;
            
            AutomationRequest: out event data port CMASI::AutomationRequest.i;
            
        flows 
        	GS_UAV: flow path recv_data -> AutomationRequest;    
        	FC_GS: flow path AirVehicleState -> send_data;
        	UAV_GS : flow path AutomationResponse -> send_data;
            
		properties
            Dispatch_Protocol => Sporadic;
            Queue_Size => 1 applies to recv_data, AutomationResponse, AirVehicleState;
            Queue_Processing_Protocol => FIFO applies to recv_data, AutomationResponse, AirVehicleState;
            Overflow_Handling_Protocol => ERROR applies to recv_data, AutomationResponse, AirVehicleState;
            Dequeue_Protocol => OneItem applies to recv_data, AutomationResponse, AirVehicleState;
            Fan_Out_Policy => Broadcast applies to send_data, AutomationRequest;
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
			-- KEEP
--		annex agree {**
--			guarantee Req001_RadioDriver "Only valid command messages shall be forwarded to message destination components" : VALID_MESSAGE(MissionCommand);
--		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
            MissionCommand: in event data port CASECMASI::CASEMissionCommand.i;
        
            send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;    
			AirVehicleState: out event data port CMASI::AirVehicleState.i;
		flows 
			command_FC : flow path MissionCommand -> send_data;
			current_position : flow path recv_data -> AirVehicleState;
		properties
            Dispatch_Protocol => Sporadic;
            Queue_Size => 1 applies to recv_data, MissionCommand;
            Queue_Processing_Protocol => FIFO applies to recv_data, MissionCommand;
            Overflow_Handling_Protocol => ERROR applies to recv_data, MissionCommand;
            Dequeue_Protocol => OneItem applies to recv_data, MissionCommand;
            Fan_Out_Policy => Broadcast applies to send_data, AirVehicleState;
            CASE_Properties::COMP_TYPE => COMM_DRIVER;
		annex agree {**     
		    assume Req001_UARTDriver "Assumes recv_data only gets well formed CASE_UART_Msg.Impl types" : 
		        CASEAgree::WellformedCASE_UART_Msg(recv_data);        
		    assume Req002_UARTDriver "Assumes MissionCommand only gets well formed CASEMissionCommand.i types" :
		        CASEAgree::WellformedCASEMissionCommand(MissionCommand); 
		        
		    guarantee Req003_UARTDRiver "The send_data outputs only well formed CASE_UART_Msg.Impl types" : 
                CASEAgree::WellformedCASE_UART_Msg(send_data);
--		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;

    thread GimbalDriver
    	features
    	   AirVehicleState: in event data port CMASI::AirVehicleState.i;
           VehicleActionCommand: in event data port CMASI::VehicleActionCommand.i;
        flows 
        	camera_action: flow sink  VehicleActionCommand;
        	camera_awareness: flow sink AirVehicleState;
    	properties
            Dispatch_Protocol => Sporadic;
            Queue_Size => 1 applies to AirVehicleState, VehicleActionCommand;
            Queue_Processing_Protocol => FIFO applies to AirVehicleState, VehicleActionCommand;
            Overflow_Handling_Protocol => ERROR applies to AirVehicleState, VehicleActionCommand;
            Dequeue_Protocol => OneItem applies to AirVehicleState, VehicleActionCommand;
            CASE_Properties::COMP_TYPE => COMM_DRIVER;
    		-- ASSUME: valid AirVehicleState
    		-- Guarantee: well formed action command
--        annex agree {**
--        **};
    end GimbalDriver;

    thread implementation GimbalDriver.Impl
    end GimbalDriver.Impl;

end Drivers;